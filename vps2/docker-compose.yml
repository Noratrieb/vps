version: "3.8"
services:
  registry:
    container_name: registry
    restart: always
    image: registry:2
    volumes:
      - "/apps/registry/config.yml:/etc/docker/registry/config.yml"
      - "/apps/registry/data:/var/lib/registry"
      - "/apps/registry/htpasswd:/htpasswd"
    ports:
      - "5000:5000"
  prometheus:
    container_name: prometheus
    restart: always
    image: bitnami/prometheus:2.51.1
    volumes:
      - "/apps/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml"
      - "/apps/prometheus/data:/opt/bitnami/prometheus/data"
    networks:
      - prometheus
  widetom:
    container_name: widetom
    image: "docker.nilstrieb.dev/widetom:490c94ca"
    restart: always
    volumes:
      - "/apps/widetom:/app/config"
    environment:
      CONFIG_PATH: /app/config/config.toml
      BOT_TOKEN_PATH: /app/config/bot_token
  killua:
    container_name: killua
    image: "docker.nilstrieb.dev/killua-bot:ac8203d2"
    restart: always
    volumes:
      - "/apps/killua:/app/config"
    environment:
      BOT_TOKEN: "${KILLUA_BOT_TOKEN}"
      KILLUA_JSON_PATH: /app/config/trivia_questions.json
  cargo_bisect_rustc_service:
    container_name: cargo-bisect-rustc-service
    image: "docker.nilstrieb.dev/cargo-bisect-rustc-service:316a4044"
    restart: always
    volumes:
      - "/apps/bisect-rustc-service/db.sqlite:/home/bisector/db.sqlite"
    environment:
      SQLITE_DB: /home/bisector/db.sqlite
    ports:
      - "5005:4000"
    networks:
      - prometheus
  #### Hugo Chat
  hugo_chat_db:
    container_name: hugo-chat-db
    image: "postgres:latest"
    restart: always
    volumes:
      - "/apps/hugo-chat/data:/var/lib/postgresql/data"
    environment:
      POSTGRES_PASSWORD: "${HUGO_CHAT_DB_PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    networks:
      - hugo-chat
  hugo_chat_server:
    container_name: hugo-chat-server
    image: "docker.nilstrieb.dev/hugo-chat-server:63bd1922"
    ports:
      - "5001:8080"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://hugo-chat-db:5432/postgres"
      SPRING_DATASOURCE_PASSWORD: "${HUGO_CHAT_DB_PASSWORD}"
    networks:
      - hugo-chat
  hugo_chat_client:
    container_name: hugo-chat-client
    image: "docker.nilstrieb.dev/hugo-chat-client:63bd1922"
    restart: always
    ports:
      - "5002:80"
  #### Karin
  karin_bot_db:
    container_name: karin-bot-db
    image: "mongo:latest"
    restart: always
    volumes:
      - "/apps/karin-bot/data:/data/db"
    environment:
      RUST_LOG: info
      PRETTY: "true"
    env_file:
      - "/apps/karin-bot/.env"
    networks:
      - karin-bot
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 500M
  karin_bot:
    container_name: karin-bot
    image: "docker.nilstrieb.dev/discord-court-bot:921be642"
    restart: always
    env_file:
      - "/apps/karin-bot/.env"
    environment:
      DB_NAME: court_bot
      MONGO_URI: "mongodb://karin-bot-db:27017"
      RUST_LOG: INFO
      PRETTY: "false"
    networks:
      - karin-bot
  #### Cors School
  cors_school_db:
    container_name: cors-school-db
    image: "postgres:latest"
    restart: always
    volumes:
      - "/apps/cors-school/data:/var/lib/postgresql/data"
    env_file:
      # POSTGRES_PASSWORD=PASSWORD
      - "/apps/cors-school/db.env"
    environment:
      POSTGRES_DB: davinci
      PGDATA: "/var/lib/postgresql/data/pgdata"
    networks:
      - cors-school
  cors_school_server:
    container_name: cors-school-server
    image: "docker.nilstrieb.dev/cors-school-server:bef75a80"
    restart: always
    env_file:
      # DATABASE_URL=postgres://postgres:PASSWORD@cors-school-db/davinci
      # JWT_SECRET=secret
      - "/apps/cors-school/server.env"
    environment:
      RUST_LOG: info
    networks:
      - cors-school
    ports:
      - "5003:8080"
  cors_school_client:
    container_name: cors-school-client
    image: "docker.nilstrieb.dev/cors-school-client:bef75a80"
    restart: always
    ports:
      - "5004:80"
  cors_school_bot:
    container_name: cors-school-bot
    image: "docker.nilstrieb.dev/cors-school-bot:bef75a80"
    restart: always
    volumes:
      # DISCORD_TOKEN=
      # CORS_API_TOKEN=
      - "/apps/cors-school/bot.env:/.env"
    environment:
      APPLICATION_ID: "867725027080142870"
      RUST_LOG: info
      BACKEND_URL: "http://cors-school-server:8080/api"
    networks:
      - cors-school
  # minecraft_server:
  #   container_name: minecraft-server
  #   image: itzg/minecraft-server:latest
  #   restart: always
  #   environment:
  #     - TYPE=VANILLA
  #     - VERSION=1.20.1
  #     - DIFFICULTY=HARD
  #     - EULA=TRUE
  #     - MOTD=baden
  #     - MEMORY=6G
  #     - MODE=creative
  #     - PVP=true
  #     - SERVER_NAME=hallenbad
  #     - USE_AIKAR_FLAGS=true
  #   env_file:
  #     # For example, storing the WHITELIST and OPS
  #     - /apps/minecraft/.env
  #   ports:
  #     - "25565:25565"
  #   volumes:
  #     - /apps/minecraft/server:/data
  ##### openolat
  openolat_db:
    container_name: openolat-db
    image: "postgres:latest"
    restart: always
    volumes:
      - "/apps/openolat/data:/var/lib/postgresql/data"
    environment:
      POSTGRES_DB: oodb
      POSTGRES_USER: oodbu
      POSTGRES_PASSWORD: "${OPENOLAT_DB_PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    networks:
      - openolat-network
  openolat:
    container_name: openolat
    image: "docker.nilstrieb.dev/openolat:69b3c8b6"
    restart: always
    volumes:
      - "/apps/openolat/olatdata:/home/openolat/olatdata"
      - "/apps/openolat/extra-properties.properties:/home/openolat/extra-properties.properties"
    ports:
      - "5011:8088"
    environment:
      DB_PASSWORD: "${OPENOLAT_DB_PASSWORD}"
      DB_URL: "jdbc:postgresql://openolat-db:5432/oodb"
      EXTRA_PROPERTIES: "/home/openolat/extra-properties.properties"
      OLAT_HOST: olat.nilstrieb.dev
    networks:
      - openolat-network
  uptime:
    container_name: uptime
    image: "docker.nilstrieb.dev/uptime:50d15bc4"
    restart: always
    volumes:
      - "/apps/uptime:/app/config"
    environment:
      UPTIME_CONFIG_PATH: /app/config/uptime.json
    ports:
      - "5010:3000"

networks:
  cors-school:
  hugo-chat:
  karin-bot:
  openolat-network:
  prometheus:
